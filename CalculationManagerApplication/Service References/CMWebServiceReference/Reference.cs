//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.34209
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CalculationManagerApplication.CMWebServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileQueueElement", Namespace="http://schemas.datacontract.org/2004/07/CalculationManager.Additional")]
    [System.SerializableAttribute()]
    public partial class FileQueueElement : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ChangedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LogEncodingField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Changed {
            get {
                return this.ChangedField;
            }
            set {
                if ((this.ChangedField.Equals(value) != true)) {
                    this.ChangedField = value;
                    this.RaisePropertyChanged("Changed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Command {
            get {
                return this.CommandField;
            }
            set {
                if ((object.ReferenceEquals(this.CommandField, value) != true)) {
                    this.CommandField = value;
                    this.RaisePropertyChanged("Command");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string File {
            get {
                return this.FileField;
            }
            set {
                if ((object.ReferenceEquals(this.FileField, value) != true)) {
                    this.FileField = value;
                    this.RaisePropertyChanged("File");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LogEncoding {
            get {
                return this.LogEncodingField;
            }
            set {
                if ((object.ReferenceEquals(this.LogEncodingField, value) != true)) {
                    this.LogEncodingField = value;
                    this.RaisePropertyChanged("LogEncoding");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileCalculationInfo", Namespace="http://schemas.datacontract.org/2004/07/CalculationManager.Additional")]
    [System.SerializableAttribute()]
    public partial class FileCalculationInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DateEndField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateStartField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LogEncodingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private CalculationManagerApplication.CMWebServiceReference.FileCalculationStatus StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DateEnd {
            get {
                return this.DateEndField;
            }
            set {
                if ((this.DateEndField.Equals(value) != true)) {
                    this.DateEndField = value;
                    this.RaisePropertyChanged("DateEnd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateStart {
            get {
                return this.DateStartField;
            }
            set {
                if ((this.DateStartField.Equals(value) != true)) {
                    this.DateStartField = value;
                    this.RaisePropertyChanged("DateStart");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Error {
            get {
                return this.ErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorField, value) != true)) {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string File {
            get {
                return this.FileField;
            }
            set {
                if ((object.ReferenceEquals(this.FileField, value) != true)) {
                    this.FileField = value;
                    this.RaisePropertyChanged("File");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LogEncoding {
            get {
                return this.LogEncodingField;
            }
            set {
                if ((object.ReferenceEquals(this.LogEncodingField, value) != true)) {
                    this.LogEncodingField = value;
                    this.RaisePropertyChanged("LogEncoding");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public CalculationManagerApplication.CMWebServiceReference.FileCalculationStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileCalculationStatus", Namespace="http://schemas.datacontract.org/2004/07/CalculationManager.Additional")]
    public enum FileCalculationStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InAction = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Done = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IsActivePropertyChangedEventArgs", Namespace="http://schemas.datacontract.org/2004/07/CalculationManager.Additional")]
    [System.SerializableAttribute()]
    public partial class IsActivePropertyChangedEventArgs : System.EventArgs, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileQueueChangedArgs", Namespace="http://schemas.datacontract.org/2004/07/CalculationManager.Additional")]
    [System.SerializableAttribute()]
    public partial class FileQueueChangedArgs : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private CalculationManagerApplication.CMWebServiceReference.FileQueueAction ActionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private CalculationManagerApplication.CMWebServiceReference.FileQueueElement ElementField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public CalculationManagerApplication.CMWebServiceReference.FileQueueAction Action {
            get {
                return this.ActionField;
            }
            set {
                if ((this.ActionField.Equals(value) != true)) {
                    this.ActionField = value;
                    this.RaisePropertyChanged("Action");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public CalculationManagerApplication.CMWebServiceReference.FileQueueElement Element {
            get {
                return this.ElementField;
            }
            set {
                if ((object.ReferenceEquals(this.ElementField, value) != true)) {
                    this.ElementField = value;
                    this.RaisePropertyChanged("Element");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileQueueAction", Namespace="http://schemas.datacontract.org/2004/07/CalculationManager.Additional")]
    public enum FileQueueAction : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Push = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Pop = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CMWebServiceReference.IControlService", CallbackContract=typeof(CalculationManagerApplication.CMWebServiceReference.IControlServiceCallback))]
    public interface IControlService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlService/GetIsCalculationActive", ReplyAction="http://tempuri.org/IControlService/GetIsCalculationActiveResponse")]
        bool GetIsCalculationActive();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlService/GetIsCalculationActive", ReplyAction="http://tempuri.org/IControlService/GetIsCalculationActiveResponse")]
        System.Threading.Tasks.Task<bool> GetIsCalculationActiveAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlService/SetIsCalculationActive", ReplyAction="http://tempuri.org/IControlService/SetIsCalculationActiveResponse")]
        void SetIsCalculationActive(bool value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlService/SetIsCalculationActive", ReplyAction="http://tempuri.org/IControlService/SetIsCalculationActiveResponse")]
        System.Threading.Tasks.Task SetIsCalculationActiveAsync(bool value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlService/GetQueue", ReplyAction="http://tempuri.org/IControlService/GetQueueResponse")]
        CalculationManagerApplication.CMWebServiceReference.FileQueueElement[] GetQueue();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlService/GetQueue", ReplyAction="http://tempuri.org/IControlService/GetQueueResponse")]
        System.Threading.Tasks.Task<CalculationManagerApplication.CMWebServiceReference.FileQueueElement[]> GetQueueAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlService/GetLog", ReplyAction="http://tempuri.org/IControlService/GetLogResponse")]
        CalculationManagerApplication.CMWebServiceReference.FileCalculationInfo[] GetLog();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlService/GetLog", ReplyAction="http://tempuri.org/IControlService/GetLogResponse")]
        System.Threading.Tasks.Task<CalculationManagerApplication.CMWebServiceReference.FileCalculationInfo[]> GetLogAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlService/SubscribeEvents", ReplyAction="http://tempuri.org/IControlService/SubscribeEventsResponse")]
        bool SubscribeEvents(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlService/SubscribeEvents", ReplyAction="http://tempuri.org/IControlService/SubscribeEventsResponse")]
        System.Threading.Tasks.Task<bool> SubscribeEventsAsync(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlService/UnsubscribeEvents", ReplyAction="http://tempuri.org/IControlService/UnsubscribeEventsResponse")]
        bool UnsubscribeEvents(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlService/UnsubscribeEvents", ReplyAction="http://tempuri.org/IControlService/UnsubscribeEventsResponse")]
        System.Threading.Tasks.Task<bool> UnsubscribeEventsAsync(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlService/Ping", ReplyAction="http://tempuri.org/IControlService/PingResponse")]
        bool Ping(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlService/Ping", ReplyAction="http://tempuri.org/IControlService/PingResponse")]
        System.Threading.Tasks.Task<bool> PingAsync(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlService/GetLogFile", ReplyAction="http://tempuri.org/IControlService/GetLogFileResponse")]
        string GetLogFile(System.Guid fileCalculationInfoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlService/GetLogFile", ReplyAction="http://tempuri.org/IControlService/GetLogFileResponse")]
        System.Threading.Tasks.Task<string> GetLogFileAsync(System.Guid fileCalculationInfoId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IControlServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IControlService/IsCalculationActiveChanged")]
        void IsCalculationActiveChanged(CalculationManagerApplication.CMWebServiceReference.IsActivePropertyChangedEventArgs value);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IControlService/QueueChanged")]
        void QueueChanged(CalculationManagerApplication.CMWebServiceReference.FileQueueChangedArgs elements);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IControlService/LogChanged")]
        void LogChanged(CalculationManagerApplication.CMWebServiceReference.FileCalculationInfo element);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IControlServiceChannel : CalculationManagerApplication.CMWebServiceReference.IControlService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ControlServiceClient : System.ServiceModel.DuplexClientBase<CalculationManagerApplication.CMWebServiceReference.IControlService>, CalculationManagerApplication.CMWebServiceReference.IControlService {
        
        public ControlServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ControlServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ControlServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ControlServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ControlServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool GetIsCalculationActive() {
            return base.Channel.GetIsCalculationActive();
        }
        
        public System.Threading.Tasks.Task<bool> GetIsCalculationActiveAsync() {
            return base.Channel.GetIsCalculationActiveAsync();
        }
        
        public void SetIsCalculationActive(bool value) {
            base.Channel.SetIsCalculationActive(value);
        }
        
        public System.Threading.Tasks.Task SetIsCalculationActiveAsync(bool value) {
            return base.Channel.SetIsCalculationActiveAsync(value);
        }
        
        public CalculationManagerApplication.CMWebServiceReference.FileQueueElement[] GetQueue() {
            return base.Channel.GetQueue();
        }
        
        public System.Threading.Tasks.Task<CalculationManagerApplication.CMWebServiceReference.FileQueueElement[]> GetQueueAsync() {
            return base.Channel.GetQueueAsync();
        }
        
        public CalculationManagerApplication.CMWebServiceReference.FileCalculationInfo[] GetLog() {
            return base.Channel.GetLog();
        }
        
        public System.Threading.Tasks.Task<CalculationManagerApplication.CMWebServiceReference.FileCalculationInfo[]> GetLogAsync() {
            return base.Channel.GetLogAsync();
        }
        
        public bool SubscribeEvents(System.Guid clientId) {
            return base.Channel.SubscribeEvents(clientId);
        }
        
        public System.Threading.Tasks.Task<bool> SubscribeEventsAsync(System.Guid clientId) {
            return base.Channel.SubscribeEventsAsync(clientId);
        }
        
        public bool UnsubscribeEvents(System.Guid clientId) {
            return base.Channel.UnsubscribeEvents(clientId);
        }
        
        public System.Threading.Tasks.Task<bool> UnsubscribeEventsAsync(System.Guid clientId) {
            return base.Channel.UnsubscribeEventsAsync(clientId);
        }
        
        public bool Ping(System.Guid clientId) {
            return base.Channel.Ping(clientId);
        }
        
        public System.Threading.Tasks.Task<bool> PingAsync(System.Guid clientId) {
            return base.Channel.PingAsync(clientId);
        }
        
        public string GetLogFile(System.Guid fileCalculationInfoId) {
            return base.Channel.GetLogFile(fileCalculationInfoId);
        }
        
        public System.Threading.Tasks.Task<string> GetLogFileAsync(System.Guid fileCalculationInfoId) {
            return base.Channel.GetLogFileAsync(fileCalculationInfoId);
        }
    }
}
